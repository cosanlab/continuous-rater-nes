{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Intro.svelte",
    "../../Consent.svelte",
    "../../Botcheck.svelte",
    "../../Instructions1.svelte",
    "../../Instructions2.svelte",
    "../../Demo.svelte",
    "../../Debrief.svelte",
    "../../Task.svelte",
    "../../MTurkPreview.svelte",
    "../../Loading.svelte",
    "../../Header.svelte",
    "../../Complete.svelte",
    "../../RatingBox.svelte",
    "../../CustomVideo.svelte"
  ],
  "sourcesContent": [
    "<!-- THIS IS THE VERSION OF THE SVELTE RATING APP INTENDED FOR USE WITH MOTH VIDEOS -->\n\n<!-- TODOs:\n\texamine weird build errors on JS console when using with MTurk (GET ERROR)\n-->\n\n<script>\n    import { db, auth, serverTime, params, ratingTypes, dev,\n            experiment, userGroup, labName, email} from './utils.js';\n    \n    import { onMount } from 'svelte';\n\timport Intro from './pages/Intro.svelte';\n\timport Botcheck from './pages/Botcheck.svelte';\n\timport Consent from './pages/Consent.svelte';\n\timport Instructions1 from './pages/Instructions1.svelte';\n\timport Instructions2 from './pages/Instructions2.svelte';\n    import Demo from './pages/Demo.svelte';\n\timport Task from './pages/Task.svelte';\n\timport Debrief from './pages/Debrief.svelte';\n    import Complete from './pages/Complete.svelte';\n    import Loading from './components/Loading.svelte';\n    import Header from './components/Header.svelte';\n    import MTurkPreview from './pages/MTurkPreview.svelte';\n\n\t// path details\n\tconst ratingsPath = `${experiment}/ratings`;\n\tconst ratingsDoc = db.doc(ratingsPath);\n\tconst subjectGroupPath = `${experiment}/subjects/${userGroup}`;\n    const subjectGroupCollection = db.collection(subjectGroupPath);\n    const stimuliPath = `${experiment}/stimuli`;\n    const stimuliDoc = db.doc(stimuliPath);\n\n\t// declare and set other necessary variables\n\tlet currVid;\n\tlet currVidSrc;\n\tlet currRating;\n\tlet subjectPath;\n\tlet ratingDocPathway;\n\tlet currentState;\n    let consentStatus;\n    let alreadyWatched = [];\n    let moviesRemaining = [];\n    let numOptions;\n    let time = 0;\n    let initExperiment = false;\n    \n    // use to validate build type in JS console\n    console.log(dev);\n\n    const resetTestWorker = async () => {\n        // Change to the new state within Svelte\n        if (params.workerId === 'test-worker') {\n            currentState = 'consent';\n            let subjectRef = subjectGroupCollection.doc(params.workerId);\n            subjectRef.get().then(function(doc) {\n                try {\n                    let currPath = `${ratingsPath}/${params.workerId}`;\n                    db.collection(currPath).get().then(function(ratingList) {\n                        // deletes all previous ratings\n                        ratingList.forEach(function(doc) {\n                            console.log('deleting: ', doc.id);\n                            db.collection(currPath).doc(doc.id).delete()   \n                        });      \n                        // updates subject log\n                        subjectRef.update({\n                            startTime: serverTime,\n                            consentStatus: 'incomplete'\n                        });\n                        console.log('reset test-worker');\n                    });\n                } catch (error) {\n                    console.error(error);\n                }\n            });\n        } else {\n            console.log(`Reset user requested but workerId is ${params.workerId}`);\n        }\n    };\n    \n    \n    \n\t\n\t// *****************************\n\t// main function\n    // *****************************\n\n\t// Before we render anything see if we have a db entry for this subject based upon the URL parameters. If not \n\t// create an entry with a new random stimulus order and put them into the instructions state. \n    // If we do, load their trial order and current experiment state\n\n    if (params.assignmentId === 'ASSIGNMENT_ID_NOT_AVAILABLE') {\n        currentState = 'mturk-preview';\n    } else if (\n        params.workerId &&\n        params.assignmentId !== 'ASSIGNMENT_ID_NOT_AVAILABLE' &&\n        params.hitId\n    ) {\n        initExperiment = true;\n    } else {\n        currentState = 'non-mturk';\n    }\n\t\n    onMount(async () => { // right when DOM is created\n        if (initExperiment) {\n            try {\n                auth.onAuthStateChanged(async (user) => {\n                    if (!user) { // if no user\n                        try { // grab the worker and assignment ID and attempt login\n                            await auth.signInWithEmailAndPassword(\n                                `${params.workerId}@experiment.com`,\n                                params.workerId\n                            );\n                            console.log('user found...signing in with credentials');\n                            // then look for document\n                        } catch (error) {\n                            if (error.code === 'auth/user-not-found') {\n                                console.log('no user found...creating new credentials');\n                                // if login fails, create new user\n                                await auth.createUserWithEmailAndPassword(\n                                    `${params.workerId}@experiment.com`,\n                                    params.workerId\n                                );\n                            } else {\n                                console.log(\"not working\");\n                                console.error(error);\n                            }\n                        }\n                    } else {\n                        console.log('user authenticated...');\n                        let currUser = auth.currentUser;\n                        try { // if user already signed in, grab relevant document\n                            let subjectRef = subjectGroupCollection.doc(params.workerId);\n                            subjectPath = `${subjectGroupPath}/${params.workerId}`; // setting for use in HTML below\n                            subjectRef.get().then(function(doc) {\n                                if (doc.exists) { // load old document\n                                    console.log('previous document found...loading state...');\n                                    // updates most recent login time\n                                    subjectRef.update({\n                                        mostRecentTime: serverTime\n                                    });\n                                } else { // create a new document\n                                    subjectGroupCollection.doc(params.workerId).set({name: 'unknown'});\n                                    console.log('no previous documents found...creating new...');\n                                    subjectPath = `${subjectGroupPath}/${params.workerId}`; // setting for use in HTML below\n                                    subjectRef.set({\n                                        workerId: params.workerId,\n                                        assignmentId: params.assignmentId,\n                                        hitId: params.hitId,\n                                        userId: currUser.uid,\n                                        startTime: serverTime,\n                                        consentStatus: 'incomplete'\n                                    });\n                                }\n                                // grab stimuli doc and add all movies to list\n                                stimuliDoc.get().then(function(stimuliTable) {\n                                    for (var field in stimuliTable.data()) {\n                                        moviesRemaining.push(field);         \n                                    }\n                                    // check to see which movies subject has already viewed (if any)\n                                    let currPath = `${ratingsPath}/${params.workerId}`;\n                                    db.collection(currPath).get().then(function(ratingList) {\n                                        // removes already completed movies from option set\n                                        ratingList.forEach(function(doc) {\n                                            moviesRemaining = removeItemOnce(moviesRemaining, doc.id.split(\"-\")[0]);\n                                        });\n                                        // see how many movies are left\n                                        numOptions = moviesRemaining.length;\n                                        console.log('moviesRemaining: ', moviesRemaining);\n                                        // if any movie-rating pairings left, load and start\n                                        if (numOptions > 0) {\n                                        // choose random movie and rating type\n                                            let movieIndex = Math.floor(Math.random()*moviesRemaining.length);\n                                            let ratingIndex = Math.floor(Math.random()*ratingTypes.length);\n                                            currVid = moviesRemaining[movieIndex];\n                                            currRating = ratingTypes[ratingIndex];\n                                            let vidPlusRating = `${currVid}-${currRating}`;\n                                            ratingDocPathway = `${ratingsPath}/${params.workerId}/${vidPlusRating}`;\n                                            // grab URL for video sourcing \n                                            currVidSrc = stimuliTable.data()[currVid];\n                                            updateState('consent');\n                                            \n                                        } else {\n                                            console.log(\"no options left!\");\n                                            updateState('complete');\n                                        }\n                                    });\n                                });\n                            });\t\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    }\n                });\n            } catch (error) {\n                console.error(error);\n            }\n        }\n\t});\n\n\t// *****************************\n\t// handler functions\n\t// *****************************\n\n\t// this function updates the current state of the user to \n\t// dynamically render different parts of the experiment (i.e. instructions, quiz, etc)\n  \tconst updateState = async (newState) => {\n    \t// Change to the new state within Svelte\n\t\tcurrentState = newState;\n\t\ttry {\n\t\t\tawait db.doc(`${experiment}/subjects/${userGroup}/${params.workerId}`).update({\n\t\t\t\tcurrentState\n\t\t\t});\n\t\t\tconsole.log('updated user state');\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\t// registers user as a bot\n\tconst failedBot = async () => {\n\t\ttry {\n\t\t\tawait db.doc(`${experiment}/subjects/${userGroup}/${params.workerId}`).update({\n\t\t\t\tbotStatus: \"bot\"\n\t\t\t});\n\t\t\tconsole.log('user identified as bot');\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\t// registers rejected consent form\n\tconst failedConsent = async () => {\n\t\ttry {\n\t\t\tawait db.doc(`${experiment}/subjects/${userGroup}/${params.workerId}`).update({\n\t\t\t\tconsentStatus: 'failed'\n\t\t\t});\n\t\t\tconsole.log('user rejected consent');\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\t// registers accepted consent form\n\tconst agreedConsent = async () => {\n\t\ttry {\n\t\t\tawait db.doc(`${experiment}/subjects/${userGroup}/${params.workerId}`).update({\n\t\t\t\tconsentStatus: 'signed'\n\t\t\t});\n\t\t\tupdateState('botcheck-instruct');\n\t\t\tconsole.log('user accepted consent');\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\t// function used to remove previously watched videos from array\n\tfunction removeItemOnce(arr, value) {\n  \t\tvar index = arr.indexOf(value);\n  \t\tif (index > -1) {\n    \t\tarr.splice(index, 1);\n  \t\t}\n  \t\treturn arr;\n\t};\n</script>\n\n\n<style>\n    .content {\n        position: relative;\n    }\n    .header {\n        left: 0;\n    }\n</style>\n\n\n<div class=\"content\">\n    <div class=\"header\">\n        <Header on:resetTestWorker={resetTestWorker}></Header>\n    </div>\n\t{#if !currentState}\n        <Loading>Loading...</Loading>\n    {:else if currentState === 'mturk-preview'}\n        <MTurkPreview />\n\t{:else if currentState === 'intro'}\n\t\t<Intro on:finished={() => updateState('consent')}></Intro>\n\t{:else if currentState === 'consent'}\n\t\t<Consent on:finished={() => agreedConsent()} on:returned={() => failedConsent()}></Consent>\n\t{:else if currentState === 'botcheck-instruct'}\n\t\t<Botcheck on:finished={() => updateState('instructions1')} on:failed={() => failedBot()}></Botcheck>\n\t{:else if currentState === 'botcheck-task'}\n\t\t<Botcheck on:finished={() => updateState('task')} on:failed={() => failedBot()}></Botcheck>\n\t{:else if currentState === 'instructions1'}\n\t\t<Instructions1 ratingType={currRating} numOptions={numOptions} on:finished={() => updateState('demo')} />\n\t{:else if currentState === 'demo'}\n\t\t<Demo time={time} ratingType={currRating} on:back={() => updateState('instructions1')} on:finished={() => updateState('instructions2')} />\n\t{:else if currentState === 'instructions2'}\n\t\t<Instructions2 on:back={() => updateState('demo')} on:finished={() => updateState('task')} />\n\t{:else if currentState === 'task'}\n\t\t<Task \n\t\t\tsrc={currVidSrc}\n\t\t\tratingType={currRating}\n\t\t\ttime={time} \n\t\t\tpathway={ratingDocPathway} \n\t\t\ton:finished={() => updateState('debrief')} \n\t\t></Task>\n\t{:else if currentState === 'debrief'}\n\t\t<Debrief\n\t\t\tsubPath={subjectPath}\n\t\t\temail={email}\n\t\t\tlabName={labName}\n\t\t\tnumOptions={numOptions}\n\t\t></Debrief>\n\t{:else if currentState === 'complete'}\n\t\t<Complete></Complete>\n\t{/if}  \t \n</div>\n\n\n\n\n",
    "<!-- this page handles the intro -->\n\n<script>\n    import { createEventDispatcher } from 'svelte';\n    import {totalHITTime, estHITTime, HITPay} from '../utils.js'\n    const dispatch = createEventDispatcher();\n\n    function handleClick () {\n        dispatch('finished');\n    };\n</script>\n\n<style>\n    .container {\n        text-align: center;\n        align-items: center;\n        width: 50%;\n        margin: 0 auto !important; \n    }\n\n    button {\n        background-color: lightblue;\n    }\n    .text-box {\n        text-align: left;\n        padding: 2%;\n        background-color: rgba(255, 255, 255, 0.4);\n        border: 2px solid grey;\n        border-radius: 2px;\n        box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);   \n    }\n</style>\n\n\n<div class=\"container\">\n    <h1>Thank you for accepting this HIT!</h1>\n    <div class=\"text-box\">\n        <p>You are given {totalHITTime} minutes to complete this HIT, but it should only take about {estHITTime}.</p>\n        <p>This HIT pays ${HITPay}.</p>\n        <p>By clicking the button below, you will be taken to the experiment, \n        including complete instructions and an informed consent agreement.</p>\n    </div>\n    <br>\n    <button on:click={handleClick}>Go To Experiment</button>\n</div>\n\n\n\n",
    "<!-- this page handles the consent -->\n\n<script>\n    import { createEventDispatcher } from 'svelte';\n    import { studyLocation, studyAim, studyTasks, email} from '../utils.js';\n    const dispatch = createEventDispatcher();\n    let consentRejected = false;\n\n    function handleYes() {\n        dispatch('finished');\n    };\n\n    function handleNo() {\n        consentRejected = true;\n        dispatch('return');\n    };\n</script>\n\n\n<style>\n    .container {\n        margin: 0 auto !important;\n        align-items: center;\n        text-align: center;\n        width: 50%;\n    }\n    .consent-box {\n        text-align: left;\n        padding: 2%;\n        background-color: rgba(255, 255, 255, 0.4);\n        border: 2px solid grey;\n        border-radius: 2px;\n        box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);   \n    }\n    .intro {\n        font-style: italic;\n    }\n    .yes {\n        background-color: lightblue;\n    }\n    .no {\n        background-color: lightcoral;\n    }\n</style>\n\n\n<div class=\"container\">\n    {#if consentRejected}\n        <p>Thank you for your time. You may exit the page.</p>\n    {:else}\n        <h1>We need your consent to proceed</h1>\n        <p><strong>(Please scroll down to see all consent information.)</strong></p>\n        <div class=\"consent-box\">\n            <p class=\"intro\">Please read the following material that explains this research study. \n            We want you to understand what you are being asked to do and what risks and benefits \n            --if any-- are associated with the study. Consent with this form will indicate that \n            you have been informed about the study and that you want to participate.</p>\n\n            <p>This project is being conducted by researchers from {studyLocation}. This study aims {studyAim}.</p>\n\n            <p>Your participation is voluntary. Participation involves {studyTasks}.</p>\n\n            <p>If you decide to take part in this study, you may be asked to view a variety of media that \n            vary in emotional content. If any of the media presented should make you feel too uncomfortable to \n            continue with the study, you are free to immediately withdraw your participation without giving up payment\n            (send us an email <a href=\"mailto:{email}\">here</a> after withdrawing for payment information).\n            To be clear: you may immediately end your participation if any aspect of the research procedure makes you \n            too uncomfortable to continue. Lastly, if you have any discomfort or concerns after viewing the media, you \n            are also encouraged to contact the principal investigator <a href=\"mailto:{email}\">here</a>.</p>\n\n            <p>The information collected will be anonymous and no identifying information will be stored with the \n            data collected during the experiment. Identifying information will not be used in any presentation or \n            paper written about this project and such presentations will represent the aggregation of data from groups of people.</p>\n        </div>\n\n        <h2>Do you understand and consent to these terms?</h2>\n\n        <button class=\"yes\" on:click={handleYes}>I agree</button>\n        <button class=\"no\" on:click={handleNo}>No thanks, I do not want to do this HIT</button>\n    {/if}\n</div>",
    "<!-- this page checks to see if Mturk user is human -->\n\n<script>\n\timport { createEventDispatcher } from 'svelte';\n\n\tconst dispatch = createEventDispatcher();\n\n\tlet answer;\n\tlet numerals = [1, 2, 3, 4];\n\tlet words = [\"one\", \"two\", \"three\", \"four\"];\n\n\tlet numAttempts = 3;\n\tlet attemptCounter = 1;\n\n\tlet currentState = 'bot check';\n\n\tlet numId1 = Math.floor(Math.random()*words.length);\n\tlet numId2 = Math.floor(Math.random()*words.length);\n\n\t// checks answer against ground truth\n\tfunction handleSubmit () {\n\t\t// success!\n\t\tif (answer == (numerals[numId1] + numerals[numId2])) {\n\t\t\tdispatch('finished');\n\t\t}\n\t\t// incorrect; try again\n\t\telse if (attemptCounter < numAttempts) {\n\t\t\tanswer = null;\n\t\t\tattemptCounter += 1;\n\n\t\t\tnumId1 = Math.floor(Math.random()*words.length);\n\t\t\tnumId2 = Math.floor(Math.random()*words.length);\n\t\t\t\n\t\t\tcurrentState = 'try again';\n\t\t}\n\t\t// failure\n\t\telse {\n\t\t\tcurrentState = 'failed';\n\t\t\tdispatch('failed');\n\t\t}\n\t}\n\n\t// returns to bot check if previous attempt failed\n\tfunction handleClick () {\n\t\tcurrentState = 'bot check';\n\t}\n\n</script>\n\n<style>\n\t.container {\n\t\tmargin: 0 auto !important; \n        text-align: center;\n\t\talign-items: center;\n\t\twidth: 50%;\n    }\n\t\t\n\n\t.bot-box {\n\t\tpadding: 2%;\n\t\tbackground-color: rgba(255, 255, 255, 0.4);\n\t\tborder: 2px solid grey;\n\t\tborder-radius: 2px;\n\t\tbox-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);   \n\t}\n\n\t.button {\n\t\t background-color: lightblue;\n\t}\n</style>\n\n\n<div class=\"container\">\n\t<h1>Bot check!</h1>\n\t{#if currentState === 'bot check'}\n\t\t\t<div class=\"bot-box\">\n\t\t\t<p>\n\t\t\t\tLet's make sure you're human. What is <strong>{words[numId1]}</strong> \n\t\t\t\tplus <strong>{words[numId2]}</strong>? Enter a single numeral in the box below.\n\t\t\t</p>\n\t\t\t<input type=\"number\" id=\"number\" name=\"number\" bind:value={answer}>\t\n    \t\t<button class=\"button\" on:click={handleSubmit}>Continue</button>\n\t\t\t</div> \n\n\t{:else if currentState === 'try again'}\n\t\t<p>Sorry, that was not the correct answer. Please try again.</p>\n\t\t<button class=\"button\" on:click={handleClick}>Try again</button>\n\t{:else if currentState === 'failed'}\n\t\t<p>Sorry, too many incorrect answers were entered. <strong>This trial will not continue.</strong></p>\n\t{/if}\n</div>\n        \n\n\n\n\n\n\n\n\n\t\n\t",
    "<!-- first instruction page -->\n<script>\n  // This is the Instructions page. It loops over the instructions array as a user reads and when click to the last page it notifies the main App.svelte component by dispatching a 'finished' event. When the last page of the instructions are reached the forward button turns into a \"Take Quiz\" button, but currently there is no quiz and it goes straight to the experiment\n  import { createEventDispatcher } from 'svelte';\n  export let ratingType;\n  export let numOptions;\n\n  // Add/remove items here to create more instructions pages\n  const ratingInstruct = 'In this task, you will watch a short video, provide ratings related to that video continuously as you watch, and answer a series of follow-up questions. <br><br> Specifically, you will rate how <strong>' + ratingType + '</strong> a video makes you feel by using your keyboard to control a rating box (which is demoed on the next page) throughout the video. <br><br> You may redo this HIT up to ' + numOptions + ' more times (you are provided with a different video each time). '\n  \n  const instructions = [\n    ratingInstruct\n  ];\n\n  const dispatch = createEventDispatcher();\n  let currentPage = 0;\n\n    function handleEnd() {\n\t\tdispatch('finished');\n    };\n\n  const backward = () => {\n    currentPage -= 1;\n    currentPage = Math.max(currentPage, 0);\n  };\n  const forward = () => {\n    // Check if we're increasing the value of currentPage beyond the number of instructions, if so tell App.svelte we're ready to move to the quiz\n    if (currentPage + 1 === instructions.length) {\n      dispatch('finished');\n    } else {\n      currentPage += 1;\n      currentPage = Math.min(currentPage, instructions.length - 1);\n    }\n  };\n</script>\n\n<style>\n  .container {\n    margin: 0 auto !important; \n    max-width: 800px;\n    text-align: center;\n  }\n\n  .text-box {\n        text-align: left;\n\t\tpadding: 2%;\n\t\tbackground-color: rgba(255, 255, 255, 0.4);\n\t\tborder: 2px solid grey;\n\t\tborder-radius: 2px;\n\t\tbox-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);   \n\t}\n\n\n  \n  .controls {\n    min-width: 25%;\n  }\n\n  button {\n    background-color: lightblue;\n  } \n</style>\n \n\n<div class=\"container\">\n  <h1>Instructions</h1>  \n  <div class=\"text-box\">\n    <div class=\"content\">\n      {@html instructions[currentPage]}\n    </div>\n  </div>\n  <br>\n  <button class=\"button is-link controls\" on:click={handleEnd}>\n    {#if currentPage === instructions.length - 1}\n      Go To Demo\n    {:else}\n      <span class=\"icon\">\n        Next\n        <i class=\"fas fa-forward\" />\n      </span>\n    {/if}\n  </button>\n</div>\n",
    "<!-- second instruction page -->\n\n<script>\n  // This is the Instructions page. It loops over the instructions array as a user reads and when click to the last page it notifies the main App.svelte component by dispatching a 'finished' event. When the last page of the instructions are reached the forward button turns into a \"Take Quiz\" button, but currently there is no quiz and it goes straight to the experiment\n  import { createEventDispatcher } from 'svelte';\n\n  // Add/remove items here to create more instructions pages\n  \n  const instructions = [\n    'If these instructions make sense and you would like to begin, click the button below to proceed to the task. Otherwise please return this HIT.'\n  ];\n\n  const dispatch = createEventDispatcher();\n  let currentPage = 0;\n\n  const backward = () => {\n    dispatch('back');\n  };\n  const forward = () => {\n    // Check if we're increasing the value of currentPage beyond the number of instructions, if so tell App.svelte we're ready to move to the quiz\n    if (currentPage + 1 === instructions.length) {\n      dispatch('finished');\n    } else {\n      currentPage += 1;\n      currentPage = Math.min(currentPage, instructions.length - 1);\n    }\n  };\n</script>\n\n<style>\n  .container {\n    margin: 0 auto !important; \n    max-width: 800px;\n    text-align: center;\n  }\n\n  .text-box {\n    text-align: left;\n\t\tpadding: 2%;\n\t\tbackground-color: rgba(255, 255, 255, 0.4);\n\t\tborder: 2px solid grey;\n\t\tborder-radius: 2px;\n\t\tbox-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);   \n\t}\n\n   .next {\n    background-color: lightblue;\n\t}\n\n  .back {\n    background-color: lightcoral;\n  }\n</style>\n \n<div class=\"container\">\n  <h1 >Instructions</h1>\n  <div class=\"text-box\">\n    <div class=\"content\">\n      {@html instructions[currentPage]}\n    </div>\n  </div>\n  <br>\n  <button class=\"back\" on:click={backward}>Back</button>\n  <button class=\"next\" on:click={forward}>\n    {#if currentPage === instructions.length - 1}\n      Go To Task\n    {:else}\n      Next\n    {/if}\n  </button>\n</div>\n\n\n\n  ",
    "<!-- this page displays a demo version of the rating box that doesn't store data -->\n\n<script>\n    import { createEventDispatcher } from 'svelte';\n\timport RatingBox from '../RatingBox.svelte';\n    import { experiment } from '../utils.js';\n    \n    const dispatch = createEventDispatcher();\n    \n    export let time = 0;\n    export let ratingType;\n\tlet pathway = `${experiment}/demo`;\n\tlet paused = false;\n    let rating = 50.0;\n    \n    function handleEnd() {\n\t\tdispatch('finished');\n    };\n    \n    function handleBack() {\n\t\tdispatch('back');\n\t}; \n</script>\n\n<style>\n\tp {\n\t\tfont-weight: normal;\n\t\tpadding: none;\n\t}\n\n\t.container {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tpadding: 1em;\n\t\tmargin: 0 auto !important;\n\t\tmin-width: 400px !important;\n\t\tmax-width: 1000px !important;\n\t}\n\n    .next {\n    background-color: lightblue;\n\t}\n\n    .back {\n        background-color: lightcoral;\n    }\n\n    .key-box {\n        align-items: center;\n        text-align: center;\n        margin: 0 auto !important;\n    }\n\n    .keys {\n        align-items: center;\n        text-align: left;\n        margin: 0 auto !important;\n        width: 25%;\n        padding: 2%;\n        background-color: rgba(255, 255, 255, 0.4);\n        border: 2px solid grey;\n        border-radius: 2px;\n        box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);\n\n    }\n\n    h1 {\n        text-align: center;\n    }\n</style>\n\n<div>\n\t<h1>Demo</h1>\n\t<div class=\"container\">\n\t\t<RatingBox \n\t\t\tpathway={pathway}\n\t\t\trating={rating}\n\t\t\tbind:time={time}\n\t\t\tpaused={paused}\n\t\t\tratingType={ratingType}\n            ratingBoxUse='demo page'>\n\t\t</RatingBox>\n\t</div>\n\t<div class=\"key-box\">\n\t\t<div class=\"keys\">\n\t\t\t<p><strong>Up arrow key:</strong> move rating bar up</p>\n\t\t\t<p><strong>Down arrow key:</strong> move rating bar down</p>\n\t\t\t<p>Hold either arrow key to accelerate in that direction. Release key to reset acceleration</p>\n\t\t</div>\n\t\t<br>\n\t\t<button class=\"back\" on:click={handleBack}>Back</button>\n\t\t<button class=\"next\" on:click={handleEnd}>Next</button>\n\t</div>\n</div>\n\n",
    "<!-- this page is the debrief that collects post survey questions;\n    there is a single button that saves responses to firebase and submits HIT  -->\n\n<script>\n    import { db, params, serverTime } from '../utils.js';\n\n    // populating necessary variables\n    export let subPath;\n    export let email;\n    export let labName;\n    export let numOptions;\n    let emailAddress = \"mailto:\" + email;\n    let currID = params.assignmentId;\n    let postURL = params.turkSubmitTo + '/mturk/externalSubmit';\n    \n    let age = '';\n    let feedback = '';\n    let sex = '';\n    let ethnicity = '';\n    let race = [];\n    const raceOptions = [\n        'Asian / Asian-American',\n        'Black / African-American',\n        'Native-American / Alaskan-Native',\n        'Pacific-Islander / Native-Hawaiian',\n        'White / Caucasian',\n        'Other / Unknown'\n    ];\n    let nativeLang = '';\n    let birth = '';\n    let handed = '';\n\n    const submitHIT = async () => {\n        try {\n            await db.doc(subPath).update({\n                age,\n                sex,\n                ethnicity,\n                race,\n                nativeLang,\n                birth,\n                handed,\n                feedback,\n                HIT_complete: serverTime\n            });\n\n        } catch (error) {\n            console.error(error);\n        }\n    };\n</script>\n\n<style>\n    .container {\n        margin: 0 auto !important; \n        max-width: 800px;\n        text-align: center;\n    }\n\n    .age-input {\n        width: 3rem;\n    }\n    .lang-input {\n        width: 20rem;\n    }\n    .textarea-feedback {\n        min-width: 80%;\n        max-width: 80%;\n    }\n\n    .options {\n        font-weight: normal;\n    }\n\n    .form-box {\n        padding: 2%;\n            background-color: rgba(255, 255, 255, 0.6);\n        border-left: 2px solid #aaa;\n            border-radius: 2px;\n            box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2);   \n        text-align: left;\n    }\n\n    .label {\n        font-weight: bold;\n    }\n\n    a {\n        font-weight: bold;\n    }\n\n    .help {\n        font-style: italic;\n    }\n\n    .button {\n        background-color: lightblue;\n    }\n</style>\n\n\n<div class=\"container\">\n    <div class=\"form-box\">\n        <form name=\"mturk\" action={postURL} method='POST'>\n            <h1>Thank You For Participating!</h1>\n            <em>All questions are optional</em>\n\n            <input type=\"hidden\" name=\"assignmentId\" id=\"assignmentId\" value={currID}>\n            <input type=\"hidden\" name=\"hidden_val_DONT_REMOVE\" value=\"1\">\n            \n            <label class=\"label\"><br><u>Age</u>\n                <div class=\"options\">\n                <input class=\"input age-input\" type=\"text\" bind:value={age}/>\n                </div>\n                <br>\n            </label>\n\n            <label class=\"label\"><u>Gender</u>\n                <div class=\"options\">\n                <label class=\"radio\">\n                    <input type=\"radio\" bind:group={sex} value={'male'} />\n                    Male\n                </label>\n                <label class=\"radio\">\n                    <input type=\"radio\" bind:group={sex} value={'female'} />\n                    Female\n                </label>\n                <label class=\"radio\">\n                    <input type=\"radio\" bind:group={sex} value={'other'} />\n                    Other\n                </label>\n                <br> \n                </div>\n            </label>\n\n            <label class=\"label\"><u>Handedness</u>\n                <div class=\"options\">\n                <label class=\"radio\">\n                    <input type=\"radio\" bind:group={handed} value={'left'} />\n                    Left Handed\n                </label>\n                <label class=\"radio\">\n                    <input type=\"radio\" bind:group={handed} value={'right'} />\n                    Right Handed\n                </label>\n                <br>\n                </div>\n            </label>\n\n            <label class=\"label\"><u>Ethnicity</u>\n                <div class=\"options\">\n                <label class=\"radio\">\n                    <input type=\"radio\" bind:group={ethnicity} value={'hispanic'} />\n                    Hispanic\n                </label>\n                <label class=\"radio\">\n                    <input type=\"radio\" bind:group={ethnicity} value={'not_hispanic'} />\n                    Not Hispanic\n                </label>\n                <br>\n                </div>\n            </label>\n                    \n            <label class=\"label\"><u>Race</u>\n                <div class=\"options\">\n                <select multiple bind:value={race}>\n                    {#each raceOptions as raceOption}\n                    <option value={raceOption}>{raceOption}</option>\n                    {/each}\n                </select>\n                </div>\n            </label>\n                    \n            <p class=\"help\">Cmd/Ctrl+Click to select multiple</p>\n                    \n            <label class=\"label\"><u>Native Language</u>\n                <div class=\"options\">\n                <input class=\"input lang-input\" type=\"text\" bind:value={nativeLang} />\n                </div>\n                <br>\n            </label>\n\n            <label class=\"label\"><u>Birth Location</u>\n                <div class=\"options\">\n                <input\n                    class=\"input lang-input\"\n                    type=\"text\"\n                    bind:value={birth}\n                    placeholder=\"City, State, Country\" />\n                </div>\n                <br>\n            </label> \n                    \n            <label class=\"label\"><u>Feedback</u>\n                <div class=\"options\">\n                <textarea\n                    class=\"textarea textarea-feedback\"\n                    bind:value={feedback} \n                    placeholder=\"Thoughts or suggestions about this HIT\" />\n                </div>\n            </label>\n                        \n            <p>\n                You can email <a href={emailAddress}>{labName}</a> \n                with questions or concerns. <br>\n                If you would like to <strong>repeat this HIT with a new video</strong>, \n                please return to the Mechanical Turk worksite and \n                accept again. There are {numOptions} videos left to watch. Thanks! <br>\n            </p>\n                    \n            <div class=\"field-label\">\n                <!-- Left empty for spacing -->\n            </div> \n            <br>\n            <button class=\"button is-success is-large\" on:click={submitHIT}>Submit HIT</button>         \n        </form>\n    </div> \n</div>\n    \n\n\n\n\n\n\n",
    "<!-- this page displays the task, consisting of a video and rating box -->\n\n<script>\n    import { createEventDispatcher } from 'svelte';\n\timport RatingBox from '../RatingBox.svelte';\n\timport CustomVideo from '../CustomVideo.svelte';\n    import { db, auth, serverTime, params } from '../utils.js';\n    \n    const dispatch = createEventDispatcher();\n    \n\texport let src;\n    export let time;\n    export let pathway;\n\texport let ratingType;\n\tlet paused = true;\n\tlet rating = 50.0;\n    \n\tfunction handlePause() {\n\t\tpaused = true;\n    };\n    \n\tfunction handlePlay() {\n\t\tpaused = false;\t\n\t};\n\t\n\tfunction handleEnd() {\n\t\tdispatch('finished');\n\t};\n\n</script>\n\n<style>\n\tmain {\n\t\tpadding: 1em;\n\t\tmargin: 0 auto;\n\t\tmin-width: 400px !important;\n\t\tmax-width: 1000px !important;\n\t}\n\t\n\th2 {\n\t\tfont-weight: normal;\n\t\tpadding: none;\n\t\twidth: 50%;\n\t}\n\n\t.container {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t}\n\n</style>\n\n\n<main>\n\t<div class=\"container\">\n\t\t<CustomVideo\n\t\t\tsrc={src}\n\t\t\tbind:time={time}\n\t\t\ton:pause={handlePause}\n\t\t\ton:play={handlePlay}\n\t\t\ton:finished={handleEnd}\n\t\t></CustomVideo>\n\t\t<RatingBox \n\t\t\tpathway={pathway}\n\t\t\trating={rating}\n\t\t\tbind:time={time}\n\t\t\tbind:paused={paused}\n\t\t\tratingType={ratingType}>\n\t\t</RatingBox>\n\t\t<h2 style=\"text-align:center\">Please rate how <strong>{ratingType}</strong> you feel</h2>\n\t</div>\n</main>\n\n",
    "<!-- this page handles the intro -->\n\n<script>\n    import {totalHITTime, estHITTime, HITPay, studyTasks} from '../utils.js'\n</script>\n\n<style>\n    .container {\n        text-align: center;\n        align-items: center;\n        width: 50%;\n        margin: 0 auto !important; \n    }\n    .text-box {\n        text-align: left;\n        padding: 2%;\n        background-color: rgba(255, 255, 255, 0.4);\n        border: 2px solid grey;\n        border-radius: 2px;\n        box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);   \n    }\n</style>\n\n\n<div class=\"container\">\n    <h1>HIT Preview</h1>\n    <div class=\"text-box\">\n        <p>This HIT involves {studyTasks}.</p>\n        <p>You are given {totalHITTime} minutes to complete this HIT, but it should only take about {estHITTime}.</p>\n        <p>This HIT pays ${HITPay}.</p>\n        <p>Please accept this HIT if you are interested!</p>\n    </div>\n</div>\n\n\n\n",
    "<script>\n  // This component is just for displaying while we wait for firebase responses\n</script>\n\n<style>\n  .loader-wrapper {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    top: 0;\n    left: 0;\n    background: #fff;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .loader {\n    width: 35rem;\n    height: 35rem;\n    position: absolute;\n  }\n  .loading-text {\n    z-index: 9;\n  }\n</style>\n\n<div class=\"loader-wrapper\">\n  <div class=\"loader is-loading\" />\n  <div class=\"loading-text\">\n    <h1>\n      <slot />\n    </h1>\n  </div>\n</div>",
    "<script>\n  import { dev, email} from '../utils.js';\n  import { createEventDispatcher } from 'svelte';\n  let emailAddress = \"mailto:\" + email;\n\n  const dispatch = createEventDispatcher();\n\n</script>\n\n<style>\n  .banner {\n    width: 100%;\n    text-align: center;\n    padding: 0.5rem;\n    border-radius: 0.25rem;\n    background-color: lightgray;\n  }\n  .icon:hover {\n    cursor: pointer;\n  }\n  span {\n    display: inline;\n  }\n</style>\n\n  <div>\n    {#if $dev}\n        <div class=\"banner dev\">\n            <span class=\"icon\" on:click={() => dispatch('resetTestWorker')}>\n                Dev mode (click here to reset test subject)\n            </span>\n        </div>\n    {:else}\n        <div class=\"banner mturk\">\n            <span>\n                If you have questions about this HIT please <a href={emailAddress}>email us</a>\n            </span>\n        </div>\n    {/if}\n</div>\n",
    "<style>\n    .container {\n        text-align: center;\n        align-items: center;\n        width: 50%;\n        margin: 0 auto !important; \n    }\n\n</style>\n\n<div class=\"container\">\n    <h1>Thank you for your participation!</h1>\n    You have watched all possible movies. <strong>You may exit this HIT.</strong>\n</div>\n\n",
    "<!-- this builds the rating box -->\n\n<script>\n    import { db } from './utils.js';\n    \n    export let ratingType;\n    export let rating; // median value for ratings\n    export let pathway;\n    export let time; // used to create dict with timestamp and rating\n    export let paused;\n    export let ratingBoxUse = 'actual';\n    \n    let width = \"800\";\n    let height = \"200\";\n    let n = width; // number of points displayed in graphic\n    let ogStepSize = 2;\n    let stepAccel = 1.1;\n    let opacity = 0;\n    let docRef;\n    let prevKeyCode;\n    \n    // grabs reference for rating doc or creates it\n    if (ratingBoxUse != 'demo page') {\n        docRef = db.doc(pathway);\n        docRef.set({0: rating});\n    }\n\n    let stepSize = ogStepSize;\n    let numbers = [];\n\n    // fills array with values\n    for (let i = 0; i < n; i++) {\n        numbers = [...numbers, rating];\n    }\n    \n    // resets step size after key hold\n    const handleKeyUp = (e) => { \n        if (e.keyCode === 38 || e.keyCode === 40) { // up and down arrow keys\n            stepSize = ogStepSize;\n        }  \n    };\n    \n    // moves rating value\n    const handleKeyPress = (e)  => {\n        if (!paused) {\n            if (e.keyCode === 38) { // up arrow\n                if (!(prevKeyCode === 38)) {\n                        stepSize = ogStepSize;\n                    }\n                prevKeyCode = 38;\n                rating = Math.min(rating + stepSize, 100);\n                stepSize *= stepAccel;\n                \n                if (ratingBoxUse != 'demo page') {\n                    let dictTime = Math.round(time);\n                    let dictVal = Math.round(rating);\n                    docRef.update({[dictTime]: dictVal});\n                }\n            }\n\n            else if (e.keyCode === 40) { // down arrow\n                if (!(prevKeyCode === 40)) {\n                        stepSize = ogStepSize;\n                    }\n                prevKeyCode = 40;\n                rating = Math.max(rating - stepSize, 0); \n                stepSize *= stepAccel;\n\n                if (ratingBoxUse != 'demo page') {\n                    let dictTime = Math.round(time);\n                    let dictVal = Math.round(rating);\n                    docRef.update({[dictTime]: dictVal});\n                }\n            }\n        }\n    };\n\n    // updates numbers array for animation with most recent rating data\n    const setNumbers = () => { \n        if (!paused) {\n            // moves each previous rating one to the left\n            for (let i = n - 1; i >= 0; i--) {\n                numbers[i + 1] = numbers[i];\n            }\n            // numbers[0] = (100 * scaleFactor - rating);\n            numbers[0] = 100 - rating;\n        }\n    };\n\n    // function for animating rating box: currently unsure how it works\n    const animate = timestamp => {\n        setNumbers(timestamp / 1000); // timestamp is time from origin of browser load\n        requestAnimationFrame(animate);\n    };\n    requestAnimationFrame(animate);\n</script>\n\n\n<style>\n\t.rating-box {\n        width: 50%;\n        border: 1px solid #aaa;\n        background-color: rgba(192, 192, 192, 0.384);\n\t\tborder-radius: 2px;\n        box-shadow: 2px 2px 8px rgba(0,0,0,0.1);\n        padding-top: 1%;\n        padding-bottom: 1%;\n\t}\n\n    line {\n        stroke: grey;\n        stroke-width: 4px;\n    }\n\n    .first-anchor {\n        padding-bottom: 2%;\n        padding-left: 2%;\n\n    }\n\n    .last-anchor {\n        padding-top: 2%;\n        padding-left: 2%;\n\n    }\n\n    .reference {\n        stroke: rgba(192, 192, 192, 1.0);\n        stroke-width: 2px;\n        stroke-dasharray: 5;\n        z-index: -1;\n\n    }\n\n    svg {\n        border-top: 1px solid #aaa;\n        border-bottom: 1px solid #aaa;\n        background-color: white;\n    }\n\n</style>\n\n<svelte:window on:keydown|preventDefault={handleKeyPress} on:keyup|preventDefault={handleKeyUp}/> \n\n<article class=\"rating-box\">\n    <div class=\"first-anchor\">Most {ratingType}</div>\n    <svg viewBox=\"0 0 {width} {height}\">\n         <line class=\"reference\"\n            x1=0\n            y1={height / 2}\n            x2={width}\n            y2={height / 2}\n        />\n        {#each numbers as y, i}\n            {#if i < n - 1}\n                <circle \n                    cx={(i / n) * width} \n                    cy={(y / 100) * height} \n                    r=\"1\"\n                />\n                <line\n                    x1={(i / n) * width}\n                    y1={(y / 100) * height}\n                    x2={(i + 1) / n * width}\n                    y2={(numbers[i + 1] / 100) * height}\n                />\n            {/if}\n        {/each}\n        <circle cx=0 cy={numbers[0] / (100) * height} r=\"5\" />\n    </svg> \n    <div class=\"last-anchor\">Least {ratingType}</div>\n</article>\n\n\n\n\n\n\n\n",
    "<!-- this builds the video player -->\n<script>\n\timport { createEventDispatcher } from 'svelte';\n    \n    const dispatch = createEventDispatcher();\n    \n\texport let time = 0;\n\texport let src;\n\tlet duration;\n\tlet paused = true;\n\tlet showControls = true;\n\tlet showControlsTimeout;\n\t\n\tfunction handleEnd() {\n\t\tdispatch('finished');\n\t};\n\n\tfunction handleMousemove(e) {\n\t\t// Make the controls visible, but fade out after\n\t\t// 2.5 seconds of inactivity\n\t\tclearTimeout(showControlsTimeout);\n\t\tshowControlsTimeout = setTimeout(() => showControls = false, 2500);\n\t\tshowControls = true;\n\n\t\tif (!(e.buttons & 1)) return; // mouse not down\n\t\tif (!duration) return; // video not loaded yet\n\n\t\t// uncomment the following lines to enable seeking\n\t\t// const { left, right } = this.getBoundingClientRect();\n\t\t// time = duration * (e.clientX - left) / (right - left);\n\t}\n\t\n\tfunction handleMousedown(e) {\n\t\t// we can't rely on the built-in click event, because it fires\n\t\t// after a drag — we have to listen for clicks ourselves\n\t\tfunction handleMouseup() {\n\t\t\tif (paused) {\n\t\t\t\tdispatch('play');\n\t\t\t\te.target.play();\n\n\t\t\t} else {\n\t\t\t\tdispatch('pause');\n\t\t\t\te.target.pause();\n\t\t\t}\n\t\t\tcancel();\n\t\t}\n\n\t\tfunction cancel() {\n\t\t\te.target.removeEventListener('mouseup', handleMouseup);\n\t\t}\n\n\t\te.target.addEventListener('mouseup', handleMouseup);\n\n\t\tsetTimeout(cancel, 200);\n\t};\n\n\tfunction format(seconds) {\n\t\tif (isNaN(seconds)) return '...';\n\n\t\tconst minutes = Math.floor(seconds / 60);\n\t\tseconds = Math.floor(seconds % 60);\n\t\tif (seconds < 10) seconds = '0' + seconds;\n\n\t\treturn `${minutes}:${seconds}`;\n\t};\n</script>\n\n<style>\n\tdiv {\n\t\tposition: relative;\n\t}\n\n\t.controls {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\twidth: 100%;\n\t\ttransition: opacity 1s;\n\t}\n\n\t.info {\n\t\tdisplay: flex;\n\t\twidth: 100%;\n\t\tjustify-content: space-between;\n\t}\n\n\tspan {\n\t\tpadding: 0.2em 0.5em;\n\t\tcolor: white;\n\t\ttext-shadow: 0 0 8px black;\n\t\tfont-size: 1.4em;\n\t\topacity: 0.7;\n\t}\n\n\t.time {\n\t\twidth: 3em;\n\t}\n\n\t.time:last-child { text-align: right }\n\n\tprogress {\n\t\tdisplay: block;\n\t\twidth: 100%;\n\t\theight: 10px;\n\t\t-webkit-appearance: none;\n\t\tappearance: none;\n\t}\n\n\tprogress::-webkit-progress-bar {\n\t\tbackground-color: rgba(0,0,0,0.2);\n\t}\n\n\tprogress::-webkit-progress-value {\n\t\tbackground-color: rgba(255,255,255,0.6);\n\t}\n\n\t.video_cont {\n\t\twidth: 50%;\n        align-items: center;  \n\t}\n\n\tvideo {\n        width: 100%;\n        border: 1px solid #aaa;\n\t\tborder-radius: 2px;\n        box-shadow: 2px 2px 8px rgba(0,0,0,0.1);   \n\t}\n</style>\n\n<div class=\"video_cont\">\n\t<video id=\"my-video\"\n\t\tsrc={src}\n\t\tpreload=\"auto\"\n\t\ton:mousemove={handleMousemove}\n\t\ton:mousedown={handleMousedown}\n\t\tbind:currentTime={time}\n\t\tbind:duration\n\t\tbind:paused\n\t\ton:ended={handleEnd}\n\t></video>\n\t<div class=\"controls\" style=\"opacity: {duration && showControls ? 1 : 0}\">\n\t\t<progress value=\"{(time / duration) || 0}\"/>\n\t\t<div class=\"info\">\n\t\t\t<span class=\"time\">{format(time)}</span>\n\t\t\t<span id=\"instruction_text\">click video to {paused ? 'play' : 'pause'}</span>\n\t\t\t<span class=\"time\">{format(duration)}</span>\n\t\t</div>\n\t</div>\n</div>"
  ],
  "names": [],
  "mappings": "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"
}